#compdef scjobs

autoload -U is-at-least

_scjobs() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--generate-completions=[Generates a completion file]: :(zsh bash fish powershell elvish)' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_scjobs_commands" \
"*::: :->scjobs" \
&& ret=0
    case $state in
    (scjobs)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:scjobs-command-$line[1]:"
        case $line[1] in
            (add)
_arguments "${_arguments_options[@]}" \
'--user=[Specify username to associate with job in automation]' \
'--prerequisite=[Highest Job ID that this build depends upon]' \
'--worker-sha=[Sets worker_kickstart_sha1 for new job to SHA1]' \
'--worker-id=[Sets worker_kickstart_sha1 for new job to one matching WID]' \
'--worker-ip=[Sets worker_kickstart_sha1 for new job to one matching WIP]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_scjobs__add_commands" \
"*::: :->add" \
&& ret=0
case $state in
    (add)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:scjobs-add-command-$line[1]:"
        case $line[1] in
            (test)
_arguments "${_arguments_options[@]}" \
'*--testbeds=[Testbeds to use instead of waiting for a random one from the pool. specified by comma-separating the entries]' \
'*--testbed-tags=[Select random testbeds based upon specified tags. Prefix tag with - to exclude testbeds with those tags.  Tags for multiple testbeds can be specified by comma-separating the entries]' \
'*--testbed-class=[Select testbeds based upon class. The class for multiple testbeds can be specified by comma-separating the entries]' \
'--test-id=[Resume testsuite run TID against selected testbeds]' \
'--tag=[Select the build specified by commit associated with TAG in special table (scqad_parameters table)]' \
'--commit-id=[Select the latest good build for commit id]' \
'--build-id=[Use specific build_id]' \
'--branch=[Select the latest good build from branch BR]' \
'--build-type=[]' \
'--from-build-id=[Set as env FROMBUILDID=FBID when calling scqadleader]' \
'--recapture-coverage[Capture code coverage on source tree after test completes successfully]' \
'--no-image[Do not reimage cluster before running testsuite]' \
'--latest[Repeatedly rerun this job with the same parameters against the latest good build of a branch. Requires the branch or tag parameter. Conflicts with resume]' \
'--override-claim[Set when using manually held testbeds instead of waiting for testbeds to be free]' \
'--nomezzanine[Skip the mezzanine claim requirement when grabbing an automated claim for this job. Requires the override_claim parameter]' \
'--noautokill[Skip this job when killing build user jobs to free up testbeds]' \
'--auto-requeue[Mark a test to indicate that you would like it rerun on subsequent pushes]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_scjobs__add__test_commands" \
"*::: :->test" \
&& ret=0
case $state in
    (test)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:scjobs-add-test-command-$line[1]:"
        case $line[1] in
            (grinder)
_arguments "${_arguments_options[@]}" \
'--grinder-repeat=[Number of times to loop through the test queue]' \
'*--grinder-tags=[The test tags to run in the grinder suite]' \
'*--grinder-testcases=[The testcases to run in grinder suite]: :(AlertEmailSend AlertEmailSendFromAddress AlertEmailTargetSetup AlertSMTPConfigSetup AlertSyslogAPI AlertSyslogSend AlertsUnconfiguredCondition AvailableUpdatesTest CertUpgradeTest CertificateUpdateFailure ClusterDetectsCloudTest ClusterPartitionAlignmentVerifyTest ClusterRSDTierVerifyTest ClusterRename ClusterReset ClusterResetAndNuke ClusterRootPasswordCheck CommandLinePS1EnvCheck ConditionAlertsQueuedAlertsSendError ConditionBackplaneInterfaceDown ConditionBackplaneUnreachable ConditionDriveTest ConditionMD ConditionReplicationMasterSwitch ConditionSlotDriveHasFailed ConditionSupportRequiredTriggerFiles ConditionTemperatureDriveTest ConditionTemperatureTest CoreDump DNSConfigSetup DriveFailOnBackgroundScrub DriveFailOnScribeIOError EssenceTest FailureTest FetchVM FillUpClusterAndVerifyDegradedState FillUpClusterTest ISOTest KeyStoreBasicTest KeyStoreWatchersTest KillScribeUnderLoad KillScribeUnderLoadAllNodes LibScribeClient LotOfVMsWithRecovery MetadataRepairOverlapDuringVMAction NodeMemoryStatistics OrphanedTimeSynchronizationTest RSDDiscover RSDFill RSDNoDuplicateID RSDOfflineOnRemovedDrive RSDOfflineOnlineWithIO RSDRemoteDisconnectDuringIO RegistrationTest RemoteConnectionUpgradeToRemoteClusterStats RemoteSupport RemoteSyslogMessages RoleBasedAccessControlLifecycleTest RoleBasedAccessControlUpgradeTest RollingLogCabinOutage RunTonsOfBackgroundProcesses RunVMOnRemoteScribe RunVMOnScribe SNSToClusterTest SSHGetFile ScIperfTest ScaledDownConditionSet ScribeFio ScribeFioAllNodes ScribePerf ScribePerfWithSnaps ScribeRedundancyWarningCloudTest ScribeVerifyDedupe SetDesiredDispositionOnRemoteDrive StopScribeUnderLoadAllNodes ThriftConnectDisconnectTimeouts TimeConfig UpgradeBrandingConfigCheck UpgradeCPUTypeTest UpgradeDomain71TypesCheck UpgradeDomainHardwareCheck UpgradeDomainSpectreCheck UpgradeDomainXMLCheck UpgradeRootPasswordCheck UpgradeThenKickDriveReAddAndRebootNode UpgradeUserTest UpgradeVSDFlagsCheck UpgradeWithRemoteSupport UpgradeWithWindowsVM VMBlockDevice VMBlockDeviceResize VMBlockDeviceTieringUpdate VMCloneMACAddressTest VMCloneTagsTest VMDeleteOrphanedSnapshots VMExportedMediaRefreshTest VMFailoverLeaseRecoveryDeadline VMFailoverNodeBackplaneDisconnect VMFailoverNodeDown VMFailoverNodePanic VMFailoverQemuCrash VMFailoverScribedCrash VMIODuringSlowDriveEvac VMMachineCPUTypesTest VMMaxIDEBlockDevicesTest VMMigrateMountVSDTest VMNetDevice VMPerformanceJetstress VMQemuSizeCollectionTest VMReplicationBothWays VMReplicationBothWaysUpgrade VMReplicationDeleteBlockDevice VMReplicationDeleteTarget VMReplicationDisableBlockDeviceSnapshots VMReplicationDisableEnable VMReplicationDisableInProgress VMReplicationDropConnectionTest VMReplicationExpandedBlockDevs VMReplicationExportImportDownNodeTest VMReplicationLifecycleTest VMReplicationNoSnapshotsDuring VMReplicationRetierAbuseTest VMReplicationRollingScribedRestartTest VMReplicationScheduledSnapshots VMReplicationSnapshotBlockCountDiff VMReplicationThreeWay VMReplicationUpgrade VMRestartClusterDisconnect VMRestartClusterLogCabinDisconnectTest VMRestartClusterPanic VMRestartClusterScribedCrash VMScheduledSnapshotTest VMSnapshotBlockCountDiff VMSoak VMStartDuplicateMACAddressTest VSDBackgroundWork VSDExpandExportImportVerifyTest VSDHistoryTest VSDJournalAddTest VSDJournalLifecycle VSDJournalVerifyCopying VSDJournalWritePatterns VSDPerformanceUpdateTest VSDRecoverSnaps VSDRecoverWithScribedStopped VSDReplicationCloneOfCloneOfClone VSDReplicationFailBack VSDReplicationHappyPath VSDReplicationPauseTest VSDReplicationThreeClusterDisconnectTest VSDRetierAbuseTest VSDSnapDiffReadTest VSDSnapshotClone VSDUpgradeTieringSettings Windows10CreateTestVM Windows10ImportOSUpdateTest Windows10ValidationTest Windows2k12CreateTestVM Windows2k12ImportOSUpdateTestVM Windows2k12ValidationTest Windows2k16CreateTestVM Windows2k16ImportOSUpdateTest Windows2k16ValidationTest Windows2k19CreateTestVM Windows2k19ImportOSUpdateTest Windows2k19ValidationTest Windows81CreateTestVM Windows81ImportOSUpdateTestVM Windows81ValidationTest WindowsDriverPerformance WindowsGuestAgent WindowsImportAllVMTest WindowsValidateMountPointsAll WindowsValidationScenarios ZKClusterMutexTest ZKInstanceGeneratorTest ZKTransactionLockTest adminCommandsTest conditionCgredStoppedTest conditionClockSkewOverThresholdTest conditionCrondStoppedTest conditionDataRedundancyDegradedTest conditionDataRedundancyDegradedWithDownNodeTest conditionInsufficientSpaceToRestartOrMigrateVMSetTest conditionLanUnreachableTest conditionLibvirtdStoppedTest conditionLogCabinStoppedTest conditionLowMemoryTest conditionMemoryThresholdExceeded conditionMonitStoppedTest conditionNginxStoppedTest conditionNtpdStoppedTest conditionOOMKillerInvokedTest conditionRootCritLowCapacityTest conditionRootMajorLowCapacityTest conditionRrddStoppedTest conditionScaleUIConsoleGatewayStoppedTest conditionScaleUIStoppedTest conditionScaledUnreachableTest conditionScribeCritLowCapacityTest conditionScribeInfoLowCapacityTest conditionScribeMajorLowCapacityTest conditionScribeMinorLowCapacityTest conditionScribeRedundancyWarning conditionScribeServiceDownTest conditionStateMachinePausedTest conditionTimeserverUnreachableTest conditionVMActionNeededTest conditionVMMigratableVMExists conditionVMStartableVMExistsTest conditionVMsNeedMigrateButNotEnoughResources conditionVMsNeedStartButNotEnoughResourcesTest conditionZookeeperStoppedTest driveErrorsInSyslogTest driveInjectErrorTest driveReAddWithoutClearingRSDHeaders driveRemoveFromKernelTest driveSetToOutPerNode driveSetToOutTest driveSetToOutThenBackInTest driveUnknownRSDHeaderTest evacuateVMFromNodeTest fioDetectsDataCorruptionTest groCheck interfacesOnlyAdvertiseOneSpeedTest iptablesIsRunningTest isoShouldNotDeleteTest kernelPanicAllNodesTest kernelPanicSingleNodeTest killLibvirtdTest killScribedPerformanceTest liveMigrateVMWithVLANTest mceFoundTest mdIntentBitmapEnabledTest nodeDeleteMissingReAddTest nodeDeleteReAddTest nodeRebootScribePerformanceTest nodeSpectreTest remoteConnectionCreateDeleteTest remoteConnectionDisconnectTest remoteConnectionNodeMissedRemoveAddTest remoteConnectionNodeRemoveAddTest remoteConnectionUpdateTest repetitiveZookeeperQuorumLossTest restAPITest rewatchLogsAfterRotateTest rsdMetadataRepairDuringVMIOTest scaledCanStartWithMonitoredDaemonsDownTest scaledDoesNotRegisterDriveErrorsWhileDownTest scdoallTest scqadLuaTestWithParamsTest sendEmailTLSTest sendTestAlertEmailTest sysrqStressTest trunkVLANPing6Test uiSmokeTest updateStatusAlertTest vmBlockDeviceChangeTypeThenStartTest vmBlockDeviceHotCreateDeleteTest vmBlockDeviceHotSnapCreateDeleteTest vmBlockDeviceMountPointsTest vmBlockDeviceRemoveThenStartTest vmCDROMEjectThenStartTest vmCDROMInsertEjectTest vmCPUTypeTest vmCloneEjectUnavailableRemovableMedia vmCloneFromSnapshotTest vmCloneOfflineTest vmCloneOnlineTest vmCreateDeleteLoopTest vmCreateTwoVSDsTest vmDuplicateMacAddrsAreProhibitedTest vmDynamicModification vmEvacuateEachNodeAndRestartScribedTest vmExportImportAddDiskTest vmExportImportMaxIDETest vmExportImportMaxVirtIOTest vmExportImportMultipleVLANs vmExportImportOfflineTest vmExportImportOnlineTest vmFailoverNodeBackplaneDisconnectWithoutIOOnTargetNodeTest vmISOTest vmInstallSCELTest vmLifecycleTest vmLifecycleTestWithRecovery vmLifecycleToTheLimitTest vmLiveFSExpandTest vmLiveMigrateEjectCDROMTest vmLiveMigrateMultipleTest vmLiveMigrateMultipleVSDTest vmLiveMigrateSingleVSDTest vmLiveMigrateWithDownNodeTest vmLiveMigrateWithIOTest vmLiveMigrateWithISOTest vmLiveMigrateWithMemoryIOTest vmLiveMigrateWithSharedISOWithoutIOTest vmLiveMigrateWithSnapshotTest vmMachineTypeTest vmNICChangeTypeTest vmNICDisconnectReconnect vmNetworkDeviceGetIPV4AddressTest vmOSInfoTest vmRebootTest vmSnapshotCloneWithIOTest vmSnapshotCreateDeleteAsyncWithIOTest vmSnapshotDeleteWithMissingVSDSnapsTest vmSnapshotGetsRecoveredTest vmSnapshotWithGuestAgentFailureTest vmStartAndBootFromISOWithDownNodeTest vmStartWithMissingISOTest vmStartWithMultipleNICsOnSameNetworkTest vmStartWithUnstartableVMTest vmVLANChangeTest vsdCloneSnapshotTest vsdCreateDeleteTest vsdCreateUpToMaxSizeTest vsdCreateWithScribedDownTest vsdDeleteWithScribedDownTest vsdIONoShm vsdIOPatternCorruptionGauntlet vsdPanicCrashVMTest vsdReadRandomIOTestV1 vsdReadRandomIOWithSnapTestV1 vsdReadRandomLatencyTestV1 vsdReadRandomLatencyWithSnapTestV1 vsdReadSequentialIOTestV1 vsdReadSequentialIOWithSnapTestV1 vsdReadSequentialLatencyTestV1 vsdReadSequentialLatencyWithSnapTestV1 vsdReadThroughputTestV1 vsdReadThroughputWithSnapTestV1 vsdReadWriteFlushRandomIOTestV1 vsdSnapshotOfflineCreateDeleteTest vsdSnapshotOnlineCreateDeleteTest vsdWriteRandomIOTestV1 vsdWriteRandomIOWithSnapTestV1 vsdWriteRandomLatencyTestV1 vsdWriteRandomLatencyWithSnapTestV1 vsdWriteSequentialIOTestV1 vsdWriteSequentialIOWithSnapTestV1 vsdWriteSequentialLatencyTestV1 vsdWriteSequentialLatencyWithSnapTestV1 vsdWriteThroughputTestV1 vsdWriteThroughputWithSnapTestV1)' \
'--source-build-id=[Build ID to install on cluster 0]' \
'--target-build-id=[Build ID to install on every cluster except 0]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(unit)
_arguments "${_arguments_options[@]}" \
'--grinder-repeat=[Number of loops to run the unittest suite]' \
'--commit-id=[Select the latest good build for commit CID]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
        esac
    ;;
esac
;;
(build)
_arguments "${_arguments_options[@]}" \
'--build-type=[Set BUILD_TYPE=TYPE during build]' \
'--commit-id=[Set BUILD_TYPE=TYPE during build]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_scjobs_commands] )) ||
_scjobs_commands() {
    local commands; commands=(
        "add:Add a job to automation" \
    )
    _describe -t commands 'scjobs commands' commands "$@"
}
(( $+functions[_scjobs__add_commands] )) ||
_scjobs__add_commands() {
    local commands; commands=(
        "test:Add a test job to automation" \
"build:Add a build job to automation" \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'scjobs add commands' commands "$@"
}
(( $+functions[_scjobs__add__build_commands] )) ||
_scjobs__add__build_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'scjobs add build commands' commands "$@"
}
(( $+functions[_scjobs__add__test__grinder_commands] )) ||
_scjobs__add__test__grinder_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'scjobs add test grinder commands' commands "$@"
}
(( $+functions[_scjobs__add__help_commands] )) ||
_scjobs__add__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'scjobs add help commands' commands "$@"
}
(( $+functions[_scjobs__add__test__help_commands] )) ||
_scjobs__add__test__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'scjobs add test help commands' commands "$@"
}
(( $+functions[_scjobs__add__test_commands] )) ||
_scjobs__add__test_commands() {
    local commands; commands=(
        "grinder:" \
"unit:" \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'scjobs add test commands' commands "$@"
}
(( $+functions[_scjobs__add__test__unit_commands] )) ||
_scjobs__add__test__unit_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'scjobs add test unit commands' commands "$@"
}

_scjobs "$@"