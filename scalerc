#! /bin/bash

if [ -f "$HOME/.scalerc_exports" ]; then
    # shellcheck disable=SC1090
    . "$HOME/.scalerc_exports"
fi

testbeds() {
    eval "$TESTBEDS" | fzf --select-1 --exit-0 --multi
    return $?
}

# is first directory inside of second?
is_subdir_of() {
    [ "${1##$2}" != "${1}" ]
    return $?
}

# short alias for make echo_targetdir
targetdir() {
    ECHO_DIR="$SRC_ROOT"
    TARGETDIR="$(BUILD_TYPE=$BUILD_TYPE make -s -C "$ECHO_DIR" echo_targetdir)"
    echo "$TARGETDIR"
}

run_local() {
    eval "$@"
}

run_buildvm() {
    # shellcheck disable=SC2029
    ssh -t "$BUILDVM_HOSTNAME" "$@"
}

run_testbeds() {
    for testbed in $(testbeds); do
        # shellcheck disable=SC2029
        ssh -t "$testbed" "$@"
    done
}

maybe_run_remote() {
    if hostname | grep -q "$BUILDVM_HOSTNAME"; then
        run_local "$@"
        ret=$?
    else
        LOCAL_BUILD_ROOT=$BUILD_ROOT
        if is_subdir_of "$PWD" "$GIT_ROOT"; then
            LOCAL_BUILD_ROOT="$SRC_ROOT${PWD##$GIT_ROOT}"
        fi
        scgsync-internal
        run_buildvm "BUILD_ROOT=\"$LOCAL_BUILD_ROOT\" $*"
        ret=$?
        unset LOCAL_BUILD_ROOT
    fi
    eval "$END_CMD"
    return $ret
}

scgsync() (
    scgsync-internal
)

scgsync-internal() (
    cd "$GIT_ROOT" || return 1

    {
        flock -x 3 || return 1
        scp ~/.scalerc* "$BUILDVM_HOSTNAME":~/

        git add .
        git commit -m "temp"
        commited=$?

        git push -f "$BUILDVM_HOSTNAME" HEAD:laptop-working &&
            if [ $commited -eq 0 ]; then
                git reset --soft HEAD~ &&
                    git reset HEAD .
            fi
    } 3>/tmp/scgsync.lock
)

scmake() {
    maybe_run_remote local_scmake "$@"
}

# Wrapper around make that handles scale specific environment variables
local_scmake() {
    # If were not in a subdirectory of the project root then run command from
    # project root
    if [ "x$BUILD_ROOT" != "x" ]; then
        cd "$BUILD_ROOT" || exit 1
    elif ! is_subdir_of "$PWD" "$SRC_ROOT"; then
        # dont change directories if you're already locally in the correct
        # directory
        cd "$SRC_ROOT" || exit 1
    fi

    echo -e "\\n>>>>>>>> \\e[94mStarting\\e[0m <<<<<<<<"
    echo -e ">> Compiling ${PWD}\\n"
    time make "$@"
    RET=$?
    if [ $RET -eq 0 ]; then
        echo -e "\\n>>>>>>>> \\e[92mDone\\e[0m <<<<<<<<"
    else
        echo -e "\\n>>>>>>>> \\e[91mKilled\\e[0m <<<<<<<<"
    fi
    return $RET
}

scunit() {
    if [ "x$*" = "x" ]; then
        UNIT_TESTS="find . -type f -name \"*UnitTest.cpp\" -exec basename {} .cpp \\; | sort -u | fzf --select-1 --exit-0 --multi"
    else
        UNIT_TESTS="echo $*"
    fi

    for var in $(eval "$UNIT_TESTS"); do
        echo "$var blah"
        run_unit "$var" || return 1
    done
}

run_unit() {
    UNIT_TEST_NAME="$1"
    scmake pre-runtest
    maybe_run_remote local_run_unit "$UNIT_TEST_NAME"
    RET=$?
    pull_gcov
    return $RET
}

local_run_unit() {
    UNIT_TEST_NAME="$1"
    UNIT_TEST_PATHS="find \"$SRC_ROOT\" -type f -wholename \"*/$(targetdir)/*\" -name \"*$UNIT_TEST_NAME*\" -name \"*UnitTest\""
    for var in $(eval "$UNIT_TEST_PATHS"); do
        if [ -f "$var" ]; then
            $var || return 1
        fi
    done
    echo "SUCCESS"
    local_gen_gcov "$@"
}

local_gen_gcov() {
    find "$SRC_ROOT" -name "*$1*.cpp" -exec dirname {} \; |
        sort -u |
        grep -v "$1unittest" |
        grep -v onboxtest |
        grep -v mockobjects |
        grep -v gen-cpp |
        grep -v gen_srcs |
        parallel "cd {}; \
                    echo \"generating coverage for {}\"; \
                    gcov -o $(targetdir) *.cpp >/dev/null 2>&1 && \
                    mv *$1*.gcov /local/gcov 2>/dev/null"
}

pull_gcov() {
    rsync -azh -e ssh "$BUILDVM_HOSTNAME":/local/gcov/ ~/gcov
}

scunit-coverage() {
    scmake && scmake pre-runtest && scmake runtest-internal
    maybe_run_remote local_gen_gcov
    pull_gcov
}

local_save_report() {
    cd "$SRC_ROOT/generated/coverage/unittest" || return 1
    GIT_SHA=$(git rev-parse --short HEAD)
    DEST_DIR="$COV_DIR/revs/$1-$GIT_SHA/"
    if [ -d "$DEST_DIR" ]; then
        rm -rf "$DEST_DIR"
    fi
    mkdir -p "$DEST_DIR"
    cp -r ./* "$DEST_DIR"
    rm -rf "${COV_DIR:?}/$1"
    ln -sf "$DEST_DIR" "$COV_DIR/$1"
}

function convertToPwd() {
    local THEPWD="$HOME/git/scale-product"
    {
        cat <(cd "$THEPWD" && find "$THEPWD" | grep -E '(cpp|h)$') \
            <(echo SWITCHOVER)
        tee "$MBUILDLOG"
    } | tee /tmp/lastbuild | gawk '
    BEGIN { sw=0; FS="/"; }
    /SWITCHOVER/ {sw=1; FS=":"; printf("switchover\n");}
    sw == 0 { m[$NF] = $0; }
    sw == 1 { printed = 0 }
    /:[0-9]+:/ && sw == 1 {
    tmp=$0;
    if (match($1, /\/([^\/]+)$/, r) != 0) $1 = r[1];
    gsub(/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]/, "", $1)
    if ($1 in m) {
        # print $tmp
        # print $1
        # print m[$1]
        rgx="^[^:]*"$1
        sub(rgx, m[$1], tmp);
        print tmp;
    } else {
        print $0;
    }
    printed = 1;
    }
    sw == 1 && printed == 0 {
        print $0;
    }
    '
}
