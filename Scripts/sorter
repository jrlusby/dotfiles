# Copyright (c) 2013 John R Lusby
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import fileinput
import argparse
from random import shuffle
import sys
import shutil
import subprocess
import os

#create argument parser
parser = argparse.ArgumentParser(description='Manually sort files into different directories')

#command line arguments section
parser.add_argument('-d', '--dest-directories', nargs='+', required=True, help='directories for files to be placed into while sorting')
parser.add_argument('-r', '--randomize', action='store_true', help='randomize the order in which files are presented for sorting')
#parser.add_argument('-f', '--files', required=True, nargs='+', help='files to be sorted')

#run argument parsing on argv
args = parser.parse_args()

#print out the number to directory mappings
i = 0
for arg in args.dest_directories:
    print(i, arg, ', ', end='')
    i += 1

print()

#create empty Files list
Files = []

#read all filnames in from stdin, assumes its piped in from another program
for line in fileinput.input('-'):
    Files.append(line.rstrip())

#randomizes the order in which the files are presented if -r argument is present
if args.randomize:
    shuffle(Files)

#switches input source back to terminal for user input
sys.stdin = open('/dev/tty')
for file in Files:
    #displays current image to be sorted
    imageview = subprocess.Popen(["sxiv", file])      # extremely environmentally specific
    subprocess.call(["sleep", ".45"])                 # extremely environmentally specific
    subprocess.call(["bspc", "window", "-f", "last"]) # extremely environmentally specific
    #requests user input to choose destination for the file
    dest = input()
    dest = dest.split(' ')
    #moves the file to new location(s)
    copied = True
    for d in dest:
        if d.isdigit():
            try:
                shutil.copy(file, args.dest_directories[int(d)])
            except shutil.Error:
                print('file named:',file,' already exists in target directory, couldnt move it')
                copied = False
        else:
            print('Invalid user input')
            copied = False
    if copied:
        os.remove(file)
    #kills the image viewer process holding recently sorted image. if I knew a way to pass the entire list to the image sorter and then iterate through it I totally would
    imageview.kill()
