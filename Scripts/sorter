#! /bin/python3

import fileinput
import argparse
from random import shuffle
import sys
import shutil
import subprocess
import os

#create argument parser
parser = argparse.ArgumentParser(description='Manually sort files into different directories')

#command line arguments section
parser.add_argument('-d', '--dest-directories', nargs='+', required=True, help='directories for files to be placed into while sorting')
parser.add_argument('-r', '--randomize', action='store_true', help='randomize the order in which files are presented for sorting')
#parser.add_argument('-f', '--files', required=True, nargs='+', help='files to be sorted')

#run argument parsing on argv
args = parser.parse_args()

#print out the number to directory mappings
i = 0
for arg in args.dest_directories:
    print(i, arg, ', ', end='')
    i += 1

print()

#create empty Files list
Files = []

#read all filnames in from stdin, assumes its piped in from another program
for line in fileinput.input('-'):
    Files.append(line.rstrip())
    
#randomizes the order in which the files are presented if -r argument is present
if args.randomize:
    shuffle(Files)

#switches input source back to terminal for user input
sys.stdin = open('/dev/tty')
for file in Files:
    #displays current image to be sorted
    imageview = subprocess.Popen(["sxiv", file])      # extremely environmentally specific
    subprocess.call(["sleep", ".45"])                 # extremely environmentally specific
    subprocess.call(["bspc", "window", "-f", "last"]) # extremely environmentally specific
    #requests user input to choose destination for the file
    dest = input()
    dest = dest.split(' ')
    #moves the file to new location(s)
    copied = True
    for d in dest:
        if d.isdigit():
            try:
                shutil.copy(file, args.dest_directories[int(d)])
            except shutil.Error:
                print('file named:',file,' already exists in target directory, couldnt move it')
                copied = False
        else:
            print('Invalid user input')
            copied = False
    if copied:
        os.remove(file)
    #kills the image viewer process holding recently sorted image. if I knew a way to pass the entire list to the image sorter and then iterate through it I totally would
    imageview.kill()
